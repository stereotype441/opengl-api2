#!/usr/bin/env python3


import argparse
import master
import mesa_xml_file
import os
import os.path


def translate_functions(result, functions):
    for name in functions.keys():
        result['gl' + name] = {}


class Processor(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Process XML files from mesa/src/mapi/glapi/gen/')
        parser.add_argument('path', metavar='PATH',
                            help='Path to mesa/src/mapi/glapi/gen/')
        parser.add_argument('--add', action='store_true',
                            help='Add new functions to master database')
        self.args = parser.parse_args()

    def run(self):
        self.mesa_functions = {}
        for filename in os.listdir(self.args.path):
            if not filename.endswith('.xml'):
                continue
            translate_functions(
                self.mesa_functions,
                mesa_xml_file.parse_xml_file(
                    os.path.join(self.args.path, filename)))
        self.master_db = master.read_database()
        self.master_changed = False
        mesa_keys = self.mesa_functions.keys()
        master_keys = self.master_db['functions'].keys()
        for name in sorted(mesa_keys - master_keys):
            self.add_function(name)
        for name in sorted(master_keys - mesa_keys):
            self.note_extra_function(name)
        if self.master_changed:
            master.write_database(self.master_db)

    def add_function(self, name):
        print('Function missing from master database: {0!r}'.format(name))
        if self.args.add:
            self.master_db['functions'][name] = self.mesa_functions[name]
            self.master_changed = True

    def note_extra_function(self, name):
        print('Extra function in master database: {0!r}'.format(name))


if __name__ == '__main__':
    Processor().run()
